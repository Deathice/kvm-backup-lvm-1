---
# tasks file for kvm-backup-lvm
- name: get vm configuration
  virt:
    name: "{{ vmname }}"
    command: get_xml
  register: xml

- name: create directory for backup
  file:
      path: "{{ dir_guest |mandatory }}" # required. Path to the file being managed.
      state: directory

- name: saving configuration
  copy:
    content: "{{ xml.get_xml }}"
    dest: "{{ xml_file }}"

- name: extracting disks from xml
  xml:
    path: "{{ xml_file }}"
    xpath: /domain/devices/disk/source
    content: attribute
  register: disks

- name: print detected lvms
  debug:
    msg: "{{ item.source.dev }}"
  when: item.source.dev is defined
  loop: "{{ disks.matches }}"
  register: lvms

- name: set lvms
  set_fact:
    tags_dict: "{{ (tags_dict|default({}))|combine({item.source.dev: item.source.dev.split('/')[2]}) }}"
  loop: "{{ disks.matches }}"
  when: item.source.dev is defined

- name: print tags_dict
  debug:
    msg: "{{ tags_dict }}"

- name: print lvs
  debug:
    msg: "{{ item.msg }}"
  loop: "{{ lvms.results }}"
  when: item.msg is defined

- name: Saving the name of lvs
  set_fact:
    lvs_name: "{{ lvs_name }} + [ '{{ item.msg |basename }}' ]"
  loop: "{{ lvms.results }}"
  when: item.msg is defined

- name: Displaying the lvs_name fact
  debug:
    msg: "{{ lvs_name.1 }}"

- name: Get vgs
  debug:
    msg: "{{ item.msg.split('/')[2] }}"
  loop: "{{ lvms.results }}"
  register: vgs
  when: item.msg is defined

- name: Saving the name of vgs
  set_fact:
    vgs_name: "{{ vgs_name }} + [ '{{ item.msg }}' ]" # Volume groups of the vm
  loop: "{{ vgs.results }}"
  when: item.msg is defined

- name: display available space for vgs
  debug:
#    var: ansible_facts['lvm']['vgs']['Data']
    msg: "{{ item.value.free_g }}"
  when: item.key == vgs.results[0].msg
  register: available_space
  loop: "{{ ansible_facts['lvm']['vgs'] | dict2items }}"

- name: display available space for lvs
  debug:
  #    var: ansible_facts['lvm']['vgs']['Data']
    msg: "{{ item.value.size_g }}"
  register: lvm_spaces
  # when: item.key == "zproxy_test"
  loop: "{{ ansible_facts['lvm']['lvs'] | dict2items }}"

- name: Shutting down the {{ vmname }}
  virt:
    name: "{{ vmname }}"
    state: shutdown

- name: Waiting to shuuting down vm
  pause:
    seconds: "{{ wait_time }}"

- name: Setting the loop var
  include_tasks: verifying_space.yml
  loop: "{{ lvs_name |zip(vgs_name) |list }}"
  loop_control:
    loop_var: lvm_and_vgs

- name: Start up the {{ vmname }}
  virt:
    name: "{{ vmname }}"
    state: running

- name: Converting snapshot
  shell: "qemu-img convert -O qcow2 /dev/{{ item.1 }}/{{ item.0 }}-snap {{ dest_qcow }}/{{ item.0 }}.qcow2"
  loop: "{{ lvs_name |zip(vgs_name) |list }}"

- name: Removing snapshot
  lvol:
    vg: "{{ item.1 }}"
    lv: "{{ item.0 }}-snap"
    state: absent
    force: true
  loop: "{{ lvs_name |zip(vgs_name) |list }}"
  loop_control:
    pause: 60
